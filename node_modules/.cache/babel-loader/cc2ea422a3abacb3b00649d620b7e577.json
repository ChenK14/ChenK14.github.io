{"ast":null,"code":"var _jsxFileName = \"/Users/chenk/performance/preformace/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport useGoogleCharts from \"./useGoogleCharts\";\nimport PerformanceTimeline from \"./PerformanceTimeline\";\nimport { Multiselect } from \"multiselect-react-dropdown\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const google = useGoogleCharts();\n  const [filter, setFilter] = useState([]);\n  const types = [{\n    name: \"resource\",\n    id: 1\n  }, {\n    name: \"resource\",\n    id: 1\n  }, {\n    name: \"resource\",\n    id: 1\n  }, {\n    name: \"resource\",\n    id: 1\n  }, {\n    name: \"resource\",\n    id: 1\n  }, {\n    name: \"resource\",\n    id: 1\n  }, {\n    name: \"resource\",\n    id: 1\n  }, {\n    name: \"resource\",\n    id: 1\n  }];\n\n  function onSelect(selectedList, _selectedItem) {\n    setFilter(selectedList);\n  }\n\n  function onRemove(selectedList, removedItem) {\n    setFilter(selectedList);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Multiselect, {\n      options: types // Options to display in the dropdown\n      ,\n      selectedValues: types // Preselected value to persist in dropdown\n      ,\n      onSelect: onSelect // Function will trigger on select event\n      ,\n      onRemove: this.onRemove // Function will trigger on remove event\n      ,\n      displayValue: \"name\" // Property name to display in the dropdown options\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PerformanceTimeline, {\n      google: google,\n      filter: filter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"/su8uu2cs+hFGIt0etMyq8K2vzM=\", false, function () {\n  return [useGoogleCharts];\n});\n\n_c = App;\nexport default App;\n\nconst onSelect = (selectedList, selectedItem) => {};\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/chenk/performance/preformace/src/App.js"],"names":["useGoogleCharts","PerformanceTimeline","Multiselect","useState","App","google","filter","setFilter","types","name","id","onSelect","selectedList","_selectedItem","onRemove","removedItem","selectedItem"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,QAAT,QAAyB,OAAzB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,MAAM,GAAGL,eAAe,EAA9B;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMK,KAAK,GAAG,CACZ;AAAEC,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,EAAE,EAAE;AAAxB,GADY,EAEZ;AAAED,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,EAAE,EAAE;AAAxB,GAFY,EAGZ;AAAED,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,EAAE,EAAE;AAAxB,GAHY,EAIZ;AAAED,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,EAAE,EAAE;AAAxB,GAJY,EAKZ;AAAED,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,EAAE,EAAE;AAAxB,GALY,EAMZ;AAAED,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,EAAE,EAAE;AAAxB,GANY,EAOZ;AAAED,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,EAAE,EAAE;AAAxB,GAPY,EAQZ;AAAED,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,EAAE,EAAE;AAAxB,GARY,CAAd;;AAWA,WAASC,QAAT,CAAkBC,YAAlB,EAAgCC,aAAhC,EAA+C;AAC7CN,IAAAA,SAAS,CAACK,YAAD,CAAT;AACD;;AACD,WAASE,QAAT,CAAkBF,YAAlB,EAAgCG,WAAhC,EAA6C;AAC3CR,IAAAA,SAAS,CAACK,YAAD,CAAT;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,WAAD;AACE,MAAA,OAAO,EAAEJ,KADX,CACkB;AADlB;AAEE,MAAA,cAAc,EAAEA,KAFlB,CAEyB;AAFzB;AAGE,MAAA,QAAQ,EAAEG,QAHZ,CAGsB;AAHtB;AAIE,MAAA,QAAQ,EAAE,KAAKG,QAJjB,CAI2B;AAJ3B;AAKE,MAAA,YAAY,EAAC,MALf,CAKsB;;AALtB;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,mBAAD;AAAqB,MAAA,MAAM,EAAET,MAA7B;AAAqC,MAAA,MAAM,EAAEC;AAA7C;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AAYD;;GAjCQF,G;UACQJ,e;;;KADRI,G;AAmCT,eAAeA,GAAf;;AAEA,MAAMO,QAAQ,GAAG,CAACC,YAAD,EAAeI,YAAf,KAAgC,CAAE,CAAnD","sourcesContent":["import \"./App.css\";\nimport useGoogleCharts from \"./useGoogleCharts\";\nimport PerformanceTimeline from \"./PerformanceTimeline\";\nimport { Multiselect } from \"multiselect-react-dropdown\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const google = useGoogleCharts();\n  const [filter, setFilter] = useState([]);\n  const types = [\n    { name: \"resource\", id: 1 },\n    { name: \"resource\", id: 1 },\n    { name: \"resource\", id: 1 },\n    { name: \"resource\", id: 1 },\n    { name: \"resource\", id: 1 },\n    { name: \"resource\", id: 1 },\n    { name: \"resource\", id: 1 },\n    { name: \"resource\", id: 1 },\n  ];\n\n  function onSelect(selectedList, _selectedItem) {\n    setFilter(selectedList);\n  }\n  function onRemove(selectedList, removedItem) {\n    setFilter(selectedList);\n  }\n\n  return (\n    <>\n      <Multiselect\n        options={types} // Options to display in the dropdown\n        selectedValues={types} // Preselected value to persist in dropdown\n        onSelect={onSelect} // Function will trigger on select event\n        onRemove={this.onRemove} // Function will trigger on remove event\n        displayValue=\"name\" // Property name to display in the dropdown options\n      />\n      <PerformanceTimeline google={google} filter={filter} />\n    </>\n  );\n}\n\nexport default App;\n\nconst onSelect = (selectedList, selectedItem) => {};\n"]},"metadata":{},"sourceType":"module"}