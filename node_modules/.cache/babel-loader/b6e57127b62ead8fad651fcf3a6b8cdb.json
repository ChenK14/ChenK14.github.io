{"ast":null,"code":"var _jsxFileName = \"/Users/chenk/performance/preformace/src/PerformanceTimeline.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PerformanceTimeline(_ref) {\n  _s();\n\n  let {\n    google,\n    filters\n  } = _ref;\n  console.log(\"RENDERING TABLE\");\n  const [timeline, setTimeline] = useState(null);\n  const [currentFilters, setCurrentFilters] = useState(filters);\n  useEffect(() => {\n    if (google && !timeline) {\n      // Create the data table.\n      google.charts.load(\"current\", {\n        packages: [\"timeline\"]\n      });\n      google.charts.setOnLoadCallback(() => drawChart(filters, google, setTimeline));\n    }\n\n    if (timeline && currentFilters !== filters) {\n      drawChart(filters, google, setTimeline).then(() => {\n        setCurrentFilters(filters);\n      });\n    }\n  }, [google, timeline]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!google && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"timeline\",\n      className: !google ? \"d-none\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PerformanceTimeline, \"s9bX731k8f55avyVKCRdLwePPo8=\");\n\n_c = PerformanceTimeline;\nexport default PerformanceTimeline;\n\nconst getPerformanceObject = async filters => {\n  const data = await fetch(\"string.json\").then(res => res.json());\n  let retList = [];\n  let counter = 1;\n  console.log(`types in filter: ${filters.map(fil => fil.name)}`);\n  data.forEach(entry => {\n    if (!entry.name.endsWith(\"duration\") && !entry.name.startsWith(\"@grammarly\")) {\n      const retEntry = {\n        displayName: entry.name,\n        type: entry.entryType,\n        name: entry.name,\n        starts: entry.startTime,\n        ends: entry.startTime + entry.duration\n      };\n      let nameStartIndex = 0;\n\n      if (entry.name.startsWith(\"[fedops] \")) {\n        nameStartIndex = 9;\n      }\n\n      let nameEndIndex = entry.name.length - 1;\n\n      if (entry.name.includes(\"started\")) {\n        nameEndIndex = entry.name.indexOf(\" started\");\n        retEntry.starts = entry.startTime;\n        retEntry.ends = entry.startTime;\n      } else if (entry.name.includes(\"finished\")) {\n        nameEndIndex = entry.name.indexOf(\" finished\");\n      } else if (entry.name.includes(\"ended\")) {\n        nameEndIndex = entry.name.indexOf(\" ended\");\n      }\n\n      retEntry.name = entry.name.slice(nameStartIndex, nameEndIndex + 1);\n      let found = false;\n      retList.forEach(ret => {\n        if (ret.name === retEntry.name) {\n          ret.ends = entry.startTime + entry.duration;\n          found = true;\n        }\n      });\n\n      if (!found) {\n        retEntry.displayName = entry.name.startsWith(\"https://\") ? `fetch call ${counter++}` : entry.name.slice(nameStartIndex, nameEndIndex + 1); // console.log({\n        //   display: retEntry.displayName,\n        //   actualName: retEntry.name,\n        // });\n\n        retList.push(retEntry);\n      }\n    }\n  });\n  return retList;\n};\n\nconst drawChart = async (filters, google, setTimeline) => {\n  const container = document.getElementById(\"timeline\");\n  container.style.height = \"8000px\";\n  const newChart = new google.visualization.Timeline(container);\n  const dataTable = new google.visualization.DataTable();\n  const data = await getPerformanceObject(filters);\n  dataTable.addColumn({\n    type: \"string\",\n    id: \"row label\"\n  });\n  dataTable.addColumn({\n    type: \"string\",\n    id: \"bar label\"\n  });\n  dataTable.addColumn({\n    type: \"string\",\n    role: \"tooltip\"\n  });\n  dataTable.addColumn({\n    type: \"number\",\n    id: \"Start\"\n  });\n  dataTable.addColumn({\n    type: \"number\",\n    id: \"End\"\n  });\n\n  for (let i = 0; i < data.length; i++) {\n    dataTable.addRow([data[i].type, data[i].displayName, `<div style=\"border:solid 1px #000000; padding: 10px\">\n\t\t\t\t\t\t\t<h2>${data[i].name}</h2>\n\t\t\t\t\t\t\t<div style=\"font-size: medium; font-family: 'Trirong', sans-serif\">${parseInt(data[i].starts)} mil - ${parseInt(data[i].ends)} mil</div>\n\t\t\t\t\t\t\t<div style=\"font-size: medium; font-family: 'Trirong', sans-serif\">Duration: ${parseInt(data[i].ends - data[i].starts)} mil</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t`, parseInt(data[i].starts) * 5, parseInt(data[i].ends) * 5]);\n  }\n\n  const options = {\n    width: \"100%\",\n    height: \"100%\",\n    timeline: {\n      colorByRowLabel: true,\n      groupByRowLabel: false\n    }\n  };\n  newChart.draw(dataTable, options);\n  setTimeline(newChart);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"PerformanceTimeline\");","map":{"version":3,"sources":["/Users/chenk/performance/preformace/src/PerformanceTimeline.js"],"names":["useEffect","useState","Spinner","PerformanceTimeline","google","filters","console","log","timeline","setTimeline","currentFilters","setCurrentFilters","charts","load","packages","setOnLoadCallback","drawChart","then","getPerformanceObject","data","fetch","res","json","retList","counter","map","fil","name","forEach","entry","endsWith","startsWith","retEntry","displayName","type","entryType","starts","startTime","ends","duration","nameStartIndex","nameEndIndex","length","includes","indexOf","slice","found","ret","push","container","document","getElementById","style","height","newChart","visualization","Timeline","dataTable","DataTable","addColumn","id","role","i","addRow","parseInt","options","width","colorByRowLabel","groupByRowLabel","draw"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,iBAAxB;;;AAEA,SAASC,mBAAT,OAAgD;AAAA;;AAAA,MAAnB;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,GAAmB;AAC9CC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAqCV,QAAQ,CAACI,OAAD,CAAnD;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,MAAM,IAAI,CAACI,QAAf,EAAyB;AACvB;AACAJ,MAAAA,MAAM,CAACQ,MAAP,CAAcC,IAAd,CAAmB,SAAnB,EAA8B;AAAEC,QAAAA,QAAQ,EAAE,CAAC,UAAD;AAAZ,OAA9B;AACAV,MAAAA,MAAM,CAACQ,MAAP,CAAcG,iBAAd,CAAgC,MAC9BC,SAAS,CAACX,OAAD,EAASD,MAAT,EAAiBK,WAAjB,CADX;AAGD;;AACD,QAAGD,QAAQ,IAAEE,cAAc,KAAGL,OAA9B,EAAsC;AACpCW,MAAAA,SAAS,CAACX,OAAD,EAAUD,MAAV,EAAkBK,WAAlB,CAAT,CAAwCQ,IAAxC,CAA6C,MAAI;AAC/CN,QAAAA,iBAAiB,CAACN,OAAD,CAAjB;AACD,OAFD;AAID;AACF,GAdQ,EAcN,CAACD,MAAD,EAAQI,QAAR,CAdM,CAAT;AAkBA,sBACE;AAAA,eACG,CAACJ,MAAD,iBAAW,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADd,eAEE;AACE,MAAA,EAAE,EAAC,UADL;AAEE,MAAA,SAAS,EAAE,CAACA,MAAD,GAAU,QAAV,GAAqB;AAFlC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA/BQD,mB;;KAAAA,mB;AAiCT,eAAeA,mBAAf;;AAEA,MAAMe,oBAAoB,GAAG,MAAOb,OAAP,IAAmB;AAC9C,QAAMc,IAAI,GAAG,MAAMC,KAAK,CAAC,aAAD,CAAL,CAAqBH,IAArB,CAA2BI,GAAD,IAASA,GAAG,CAACC,IAAJ,EAAnC,CAAnB;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,OAAO,GAAG,CAAd;AACAlB,EAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBF,OAAO,CAACoB,GAAR,CAAYC,GAAG,IAAEA,GAAG,CAACC,IAArB,CAA2B,EAA3D;AACAR,EAAAA,IAAI,CAACS,OAAL,CAAcC,KAAD,IAAW;AACtB,QACE,CAACA,KAAK,CAACF,IAAN,CAAWG,QAAX,CAAoB,UAApB,CAAD,IACA,CAACD,KAAK,CAACF,IAAN,CAAWI,UAAX,CAAsB,YAAtB,CAFH,EAGE;AACA,YAAMC,QAAQ,GAAG;AACfC,QAAAA,WAAW,EAAEJ,KAAK,CAACF,IADJ;AAEfO,QAAAA,IAAI,EAAEL,KAAK,CAACM,SAFG;AAGfR,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAHG;AAIfS,QAAAA,MAAM,EAAEP,KAAK,CAACQ,SAJC;AAKfC,QAAAA,IAAI,EAAET,KAAK,CAACQ,SAAN,GAAkBR,KAAK,CAACU;AALf,OAAjB;AAQA,UAAIC,cAAc,GAAG,CAArB;;AACA,UAAIX,KAAK,CAACF,IAAN,CAAWI,UAAX,CAAsB,WAAtB,CAAJ,EAAwC;AACtCS,QAAAA,cAAc,GAAG,CAAjB;AACD;;AACD,UAAIC,YAAY,GAAGZ,KAAK,CAACF,IAAN,CAAWe,MAAX,GAAoB,CAAvC;;AACA,UAAIb,KAAK,CAACF,IAAN,CAAWgB,QAAX,CAAoB,SAApB,CAAJ,EAAoC;AAClCF,QAAAA,YAAY,GAAGZ,KAAK,CAACF,IAAN,CAAWiB,OAAX,CAAmB,UAAnB,CAAf;AACAZ,QAAAA,QAAQ,CAACI,MAAT,GAAkBP,KAAK,CAACQ,SAAxB;AACAL,QAAAA,QAAQ,CAACM,IAAT,GAAgBT,KAAK,CAACQ,SAAtB;AACD,OAJD,MAIO,IAAIR,KAAK,CAACF,IAAN,CAAWgB,QAAX,CAAoB,UAApB,CAAJ,EAAqC;AAC1CF,QAAAA,YAAY,GAAGZ,KAAK,CAACF,IAAN,CAAWiB,OAAX,CAAmB,WAAnB,CAAf;AACD,OAFM,MAEA,IAAIf,KAAK,CAACF,IAAN,CAAWgB,QAAX,CAAoB,OAApB,CAAJ,EAAkC;AACvCF,QAAAA,YAAY,GAAGZ,KAAK,CAACF,IAAN,CAAWiB,OAAX,CAAmB,QAAnB,CAAf;AACD;;AACDZ,MAAAA,QAAQ,CAACL,IAAT,GAAgBE,KAAK,CAACF,IAAN,CAAWkB,KAAX,CAAiBL,cAAjB,EAAiCC,YAAY,GAAG,CAAhD,CAAhB;AAEA,UAAIK,KAAK,GAAG,KAAZ;AACAvB,MAAAA,OAAO,CAACK,OAAR,CAAiBmB,GAAD,IAAS;AACvB,YAAIA,GAAG,CAACpB,IAAJ,KAAaK,QAAQ,CAACL,IAA1B,EAAgC;AAC9BoB,UAAAA,GAAG,CAACT,IAAJ,GAAWT,KAAK,CAACQ,SAAN,GAAkBR,KAAK,CAACU,QAAnC;AACAO,UAAAA,KAAK,GAAG,IAAR;AACD;AACF,OALD;;AAMA,UAAI,CAACA,KAAL,EAAY;AACVd,QAAAA,QAAQ,CAACC,WAAT,GAAuBJ,KAAK,CAACF,IAAN,CAAWI,UAAX,CAAsB,UAAtB,IAClB,cAAaP,OAAO,EAAG,EADL,GAEnBK,KAAK,CAACF,IAAN,CAAWkB,KAAX,CAAiBL,cAAjB,EAAiCC,YAAY,GAAG,CAAhD,CAFJ,CADU,CAIV;AACA;AACA;AACA;;AACAlB,QAAAA,OAAO,CAACyB,IAAR,CAAahB,QAAb;AACD;AACF;AACF,GA/CD;AAgDA,SAAOT,OAAP;AACD,CAtDD;;AAwDA,MAAMP,SAAS,GAAG,OAAOX,OAAP,EAAgBD,MAAhB,EAAwBK,WAAxB,KAAwC;AACxD,QAAMwC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAlB;AACAF,EAAAA,SAAS,CAACG,KAAV,CAAgBC,MAAhB,GAAyB,QAAzB;AACA,QAAMC,QAAQ,GAAG,IAAIlD,MAAM,CAACmD,aAAP,CAAqBC,QAAzB,CAAkCP,SAAlC,CAAjB;AACA,QAAMQ,SAAS,GAAG,IAAIrD,MAAM,CAACmD,aAAP,CAAqBG,SAAzB,EAAlB;AACA,QAAMvC,IAAI,GAAG,MAAMD,oBAAoB,CAACb,OAAD,CAAvC;AACAoD,EAAAA,SAAS,CAACE,SAAV,CAAoB;AAAEzB,IAAAA,IAAI,EAAE,QAAR;AAAkB0B,IAAAA,EAAE,EAAE;AAAtB,GAApB;AACAH,EAAAA,SAAS,CAACE,SAAV,CAAoB;AAAEzB,IAAAA,IAAI,EAAE,QAAR;AAAkB0B,IAAAA,EAAE,EAAE;AAAtB,GAApB;AACAH,EAAAA,SAAS,CAACE,SAAV,CAAoB;AAAEzB,IAAAA,IAAI,EAAE,QAAR;AAAkB2B,IAAAA,IAAI,EAAE;AAAxB,GAApB;AACAJ,EAAAA,SAAS,CAACE,SAAV,CAAoB;AAAEzB,IAAAA,IAAI,EAAE,QAAR;AAAkB0B,IAAAA,EAAE,EAAE;AAAtB,GAApB;AACAH,EAAAA,SAAS,CAACE,SAAV,CAAoB;AAAEzB,IAAAA,IAAI,EAAE,QAAR;AAAkB0B,IAAAA,EAAE,EAAE;AAAtB,GAApB;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3C,IAAI,CAACuB,MAAzB,EAAiCoB,CAAC,EAAlC,EAAsC;AACpCL,IAAAA,SAAS,CAACM,MAAV,CAAiB,CACf5C,IAAI,CAAC2C,CAAD,CAAJ,CAAQ5B,IADO,EAEff,IAAI,CAAC2C,CAAD,CAAJ,CAAQ7B,WAFO,EAGd;AACP,aAAad,IAAI,CAAC2C,CAAD,CAAJ,CAAQnC,IAAK;AAC1B,4EAA4EqC,QAAQ,CACpE7C,IAAI,CAAC2C,CAAD,CAAJ,CAAQ1B,MAD4D,CAEpE,UAAS4B,QAAQ,CAAC7C,IAAI,CAAC2C,CAAD,CAAJ,CAAQxB,IAAT,CAAe;AAChD,sFAAsF0B,QAAQ,CAC9E7C,IAAI,CAAC2C,CAAD,CAAJ,CAAQxB,IAAR,GAAenB,IAAI,CAAC2C,CAAD,CAAJ,CAAQ1B,MADuD,CAE9E;AAChB;AACA,OAZqB,EAaf4B,QAAQ,CAAC7C,IAAI,CAAC2C,CAAD,CAAJ,CAAQ1B,MAAT,CAAR,GAA2B,CAbZ,EAcf4B,QAAQ,CAAC7C,IAAI,CAAC2C,CAAD,CAAJ,CAAQxB,IAAT,CAAR,GAAyB,CAdV,CAAjB;AAgBD;;AACD,QAAM2B,OAAO,GAAG;AACdC,IAAAA,KAAK,EAAE,MADO;AAEdb,IAAAA,MAAM,EAAE,MAFM;AAGd7C,IAAAA,QAAQ,EAAE;AAAE2D,MAAAA,eAAe,EAAE,IAAnB;AAAyBC,MAAAA,eAAe,EAAE;AAA1C;AAHI,GAAhB;AAMAd,EAAAA,QAAQ,CAACe,IAAT,CAAcZ,SAAd,EAAyBQ,OAAzB;AACAxD,EAAAA,WAAW,CAAC6C,QAAD,CAAX;AACD,CAtCD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nfunction PerformanceTimeline({google, filters}) {\n  console.log(\"RENDERING TABLE\")\n  const [timeline, setTimeline] = useState(null);\n  const [currentFilters, setCurrentFilters]= useState(filters)\n  useEffect(() => {\n    if (google && !timeline) {\n      // Create the data table.\n      google.charts.load(\"current\", { packages: [\"timeline\"] });\n      google.charts.setOnLoadCallback(() =>\n        drawChart(filters,google, setTimeline)\n      );\n    }\n    if(timeline&&currentFilters!==filters){\n      drawChart(filters, google, setTimeline).then(()=>{\n        setCurrentFilters(filters)\n      })\n\n    }\n  }, [google,timeline]);\n\n\n\n  return (\n    <div>\n      {!google && <Spinner />}\n      <div\n        id=\"timeline\"\n        className={!google ? \"d-none\" : \"\"}\n      />\n    </div>\n  );\n}\n\nexport default PerformanceTimeline;\n\nconst getPerformanceObject = async (filters) => {\n  const data = await fetch(\"string.json\").then((res) => res.json());\n  let retList = [];\n  let counter = 1;\n  console.log(`types in filter: ${filters.map(fil=>fil.name)}`);\n  data.forEach((entry) => {\n    if (\n      !entry.name.endsWith(\"duration\") &&\n      !entry.name.startsWith(\"@grammarly\")\n    ) {\n      const retEntry = {\n        displayName: entry.name,\n        type: entry.entryType,\n        name: entry.name,\n        starts: entry.startTime,\n        ends: entry.startTime + entry.duration,\n      };\n\n      let nameStartIndex = 0;\n      if (entry.name.startsWith(\"[fedops] \")) {\n        nameStartIndex = 9;\n      }\n      let nameEndIndex = entry.name.length - 1;\n      if (entry.name.includes(\"started\")) {\n        nameEndIndex = entry.name.indexOf(\" started\");\n        retEntry.starts = entry.startTime;\n        retEntry.ends = entry.startTime;\n      } else if (entry.name.includes(\"finished\")) {\n        nameEndIndex = entry.name.indexOf(\" finished\");\n      } else if (entry.name.includes(\"ended\")) {\n        nameEndIndex = entry.name.indexOf(\" ended\");\n      }\n      retEntry.name = entry.name.slice(nameStartIndex, nameEndIndex + 1);\n\n      let found = false;\n      retList.forEach((ret) => {\n        if (ret.name === retEntry.name) {\n          ret.ends = entry.startTime + entry.duration;\n          found = true;\n        }\n      });\n      if (!found) {\n        retEntry.displayName = entry.name.startsWith(\"https://\")\n          ? `fetch call ${counter++}`\n          : entry.name.slice(nameStartIndex, nameEndIndex + 1);\n        // console.log({\n        //   display: retEntry.displayName,\n        //   actualName: retEntry.name,\n        // });\n        retList.push(retEntry);\n      }\n    }\n  });\n  return retList;\n};\n\nconst drawChart = async (filters, google, setTimeline) => {\n  const container = document.getElementById(\"timeline\");\n  container.style.height = \"8000px\";\n  const newChart = new google.visualization.Timeline(container);\n  const dataTable = new google.visualization.DataTable();\n  const data = await getPerformanceObject(filters);\n  dataTable.addColumn({ type: \"string\", id: \"row label\" });\n  dataTable.addColumn({ type: \"string\", id: \"bar label\" });\n  dataTable.addColumn({ type: \"string\", role: \"tooltip\" });\n  dataTable.addColumn({ type: \"number\", id: \"Start\" });\n  dataTable.addColumn({ type: \"number\", id: \"End\" });\n\n  for (let i = 0; i < data.length; i++) {\n    dataTable.addRow([\n      data[i].type,\n      data[i].displayName,\n      `<div style=\"border:solid 1px #000000; padding: 10px\">\n\t\t\t\t\t\t\t<h2>${data[i].name}</h2>\n\t\t\t\t\t\t\t<div style=\"font-size: medium; font-family: 'Trirong', sans-serif\">${parseInt(\n                data[i].starts\n              )} mil - ${parseInt(data[i].ends)} mil</div>\n\t\t\t\t\t\t\t<div style=\"font-size: medium; font-family: 'Trirong', sans-serif\">Duration: ${parseInt(\n                data[i].ends - data[i].starts\n              )} mil</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t`,\n      parseInt(data[i].starts) * 5,\n      parseInt(data[i].ends) * 5,\n    ]);\n  }\n  const options = {\n    width: \"100%\",\n    height: \"100%\",\n    timeline: { colorByRowLabel: true, groupByRowLabel: false },\n  };\n\n  newChart.draw(dataTable, options);\n  setTimeline(newChart);\n};\n"]},"metadata":{},"sourceType":"module"}