{"ast":null,"code":"var _jsxFileName = \"/Users/chenk/performance/preformace/src/PerformanceTimeline.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PerformanceTimeline(_ref) {\n  _s();\n\n  let {\n    google\n  } = _ref;\n  const [timeline, setTimeline] = useState(null);\n  const [filter, setFilter] = useState([]);\n  useEffect(() => {\n    if (google && !timeline) {\n      // Create the data table.\n      const newChart = new google.visualization.Timeline(document.getElementById(\"timeline\"));\n      const dataTable = new google.visualization.DataTable();\n      const data = getPerformanceObject(filter).then(() => {\n        dataTable.addColumn({\n          type: \"string\",\n          id: \"row label\"\n        });\n        dataTable.addColumn({\n          type: \"string\",\n          id: \"bar label\"\n        });\n        dataTable.addColumn({\n          type: \"string\",\n          role: \"tooltip\"\n        });\n        dataTable.addColumn({\n          type: \"number\",\n          id: \"Start\"\n        });\n        dataTable.addColumn({\n          type: \"number\",\n          id: \"End\"\n        });\n\n        for (let i = 0; i < data.length; i++) {\n          dataTable.addRow([data[i].type, data[i].displayName, `<div style=\"border:solid 1px #000000; padding: 10px\">\n\t\t\t\t\t\t\t<h2>${data[i].name}</h2>\n\t\t\t\t\t\t\t<div style=\"font-size: medium; font-family: 'Trirong', sans-serif\">${parseInt(data[i].starts)} mil - ${parseInt(data[i].ends)} mil</div>\n\t\t\t\t\t\t\t<div style=\"font-size: medium; font-family: 'Trirong', sans-serif\">Duration: ${parseInt(data[i].ends - data[i].starts)} mil</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t`, parseInt(data[i].starts) * 5, parseInt(data[i].ends) * 5]);\n        }\n\n        const options = {\n          width: \"100%\",\n          height: \"100%\",\n          timeline: {\n            colorByRowLabel: true,\n            groupByRowLabel: false\n          }\n        };\n        newChart.draw(dataTable, options);\n        setTimeline(newChart);\n      });\n    }\n  }, [google, filter, timeline]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!google && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pizzaChart\",\n      className: !google ? \"d-none\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PerformanceTimeline, \"soReDrc2VUcvV0W84lfuBZmfkgE=\");\n\n_c = PerformanceTimeline;\nexport default PerformanceTimeline;\n\nconst getPerformanceObject = async filter => {\n  const data = await fetch(\"./string.json\").then(res => res.json());\n  let retList = [];\n  let counter = 1;\n  data.forEach(entry => {\n    console.log(`is type in filter: ${filter.includes(entry.entryType)}`);\n\n    if (!entry.name.endsWith(\"duration\") && !entry.name.startsWith(\"@grammarly\")) {\n      const retEntry = {\n        displayName: entry.name,\n        type: entry.entryType,\n        name: entry.name,\n        starts: entry.startTime,\n        ends: entry.startTime + entry.duration\n      };\n      let nameStartIndex = 0;\n\n      if (entry.name.startsWith(\"[fedops] \")) {\n        nameStartIndex = 9;\n      }\n\n      let nameEndIndex = entry.name.length - 1;\n\n      if (entry.name.includes(\"started\")) {\n        nameEndIndex = entry.name.indexOf(\" started\");\n        retEntry.starts = entry.startTime;\n        retEntry.ends = entry.startTime;\n      } else if (entry.name.includes(\"finished\")) {\n        nameEndIndex = entry.name.indexOf(\" finished\");\n      } else if (entry.name.includes(\"ended\")) {\n        nameEndIndex = entry.name.indexOf(\" ended\");\n      }\n\n      retEntry.name = entry.name.slice(nameStartIndex, nameEndIndex + 1);\n      let found = false;\n      retList.forEach(ret => {\n        if (ret.name === retEntry.name) {\n          ret.ends = entry.startTime + entry.duration;\n          found = true;\n        }\n      });\n\n      if (!found) {\n        retEntry.displayName = entry.name.startsWith(\"https://\") ? `fetch call ${counter++}` : entry.name.slice(nameStartIndex, nameEndIndex + 1);\n        console.log({\n          display: retEntry.displayName,\n          actualName: retEntry.name\n        });\n        retList.push(retEntry);\n      }\n    }\n  });\n  return retList;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"PerformanceTimeline\");","map":{"version":3,"sources":["/Users/chenk/performance/preformace/src/PerformanceTimeline.js"],"names":["useEffect","useState","Spinner","PerformanceTimeline","google","timeline","setTimeline","filter","setFilter","newChart","visualization","Timeline","document","getElementById","dataTable","DataTable","data","getPerformanceObject","then","addColumn","type","id","role","i","length","addRow","displayName","name","parseInt","starts","ends","options","width","height","colorByRowLabel","groupByRowLabel","draw","fetch","res","json","retList","counter","forEach","entry","console","log","includes","entryType","endsWith","startsWith","retEntry","startTime","duration","nameStartIndex","nameEndIndex","indexOf","slice","found","ret","display","actualName","push"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nfunction PerformanceTimeline({ google }) {\n  const [timeline, setTimeline] = useState(null);\n  const [filter, setFilter] = useState([]);\n\n  useEffect(() => {\n    if (google && !timeline) {\n      // Create the data table.\n      const newChart = new google.visualization.Timeline(\n        document.getElementById(\"timeline\")\n      );\n      const dataTable = new google.visualization.DataTable();\n\n      const data = getPerformanceObject(filter).then(() => {\n        dataTable.addColumn({ type: \"string\", id: \"row label\" });\n        dataTable.addColumn({ type: \"string\", id: \"bar label\" });\n        dataTable.addColumn({ type: \"string\", role: \"tooltip\" });\n        dataTable.addColumn({ type: \"number\", id: \"Start\" });\n        dataTable.addColumn({ type: \"number\", id: \"End\" });\n\n        for (let i = 0; i < data.length; i++) {\n          dataTable.addRow([\n            data[i].type,\n            data[i].displayName,\n            `<div style=\"border:solid 1px #000000; padding: 10px\">\n\t\t\t\t\t\t\t<h2>${data[i].name}</h2>\n\t\t\t\t\t\t\t<div style=\"font-size: medium; font-family: 'Trirong', sans-serif\">${parseInt(\n                data[i].starts\n              )} mil - ${parseInt(data[i].ends)} mil</div>\n\t\t\t\t\t\t\t<div style=\"font-size: medium; font-family: 'Trirong', sans-serif\">Duration: ${parseInt(\n                data[i].ends - data[i].starts\n              )} mil</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t`,\n            parseInt(data[i].starts) * 5,\n            parseInt(data[i].ends) * 5,\n          ]);\n        }\n        const options = {\n          width: \"100%\",\n          height: \"100%\",\n          timeline: { colorByRowLabel: true, groupByRowLabel: false },\n        };\n\n        newChart.draw(dataTable, options);\n\n        setTimeline(newChart);\n      });\n    }\n  }, [google, filter, timeline]);\n\n  return (\n    <>\n      {!google && <Spinner />}\n      <div id=\"pizzaChart\" className={!google ? \"d-none\" : \"\"} />\n    </>\n  );\n}\n\nexport default PerformanceTimeline;\n\nconst getPerformanceObject = async (filter) => {\n  const data = await fetch(\"./string.json\").then((res) => res.json());\n  let retList = [];\n  let counter = 1;\n  data.forEach((entry) => {\n      console.log(`is type in filter: ${filter.includes(entry.entryType)}`)\n    if (\n      !entry.name.endsWith(\"duration\") &&\n      !entry.name.startsWith(\"@grammarly\")\n    ) {\n      const retEntry = {\n        displayName: entry.name,\n        type: entry.entryType,\n        name: entry.name,\n        starts: entry.startTime,\n        ends: entry.startTime + entry.duration,\n      };\n\n      let nameStartIndex = 0;\n      if (entry.name.startsWith(\"[fedops] \")) {\n        nameStartIndex = 9;\n      }\n      let nameEndIndex = entry.name.length - 1;\n      if (entry.name.includes(\"started\")) {\n        nameEndIndex = entry.name.indexOf(\" started\");\n        retEntry.starts = entry.startTime;\n        retEntry.ends = entry.startTime;\n      } else if (entry.name.includes(\"finished\")) {\n        nameEndIndex = entry.name.indexOf(\" finished\");\n      } else if (entry.name.includes(\"ended\")) {\n        nameEndIndex = entry.name.indexOf(\" ended\");\n      }\n      retEntry.name = entry.name.slice(nameStartIndex, nameEndIndex + 1);\n\n      let found = false;\n      retList.forEach((ret) => {\n        if (ret.name === retEntry.name) {\n          ret.ends = entry.startTime + entry.duration;\n          found = true;\n        }\n      });\n      if (!found) {\n        retEntry.displayName = entry.name.startsWith(\"https://\")\n          ? `fetch call ${counter++}`\n          : entry.name.slice(nameStartIndex, nameEndIndex + 1);\n        console.log({\n          display: retEntry.displayName,\n          actualName: retEntry.name,\n        });\n        retList.push(retEntry);\n      }\n    }\n  });\n  return retList;\n};\n"]},"metadata":{},"sourceType":"module"}