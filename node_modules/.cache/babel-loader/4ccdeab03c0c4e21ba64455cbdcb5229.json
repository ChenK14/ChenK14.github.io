{"ast":null,"code":"var _jsxFileName = \"/Users/chenk/performance/ChenK14.github.io/chenk14.github.io/src/PerformanceTimeline.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PerformanceTimeline(_ref) {\n  _s();\n\n  let {\n    google,\n    filters,\n    entries\n  } = _ref;\n  const [timeline, setTimeline] = useState(null);\n  const [currentFilters, setCurrentFilters] = useState(filters);\n  useEffect(() => {\n    if (google && (!timeline || currentFilters !== filters)) {\n      google.charts.load(\"current\", {\n        packages: [\"timeline\"]\n      });\n      google.charts.setOnLoadCallback(() => drawChart(filters, google, setTimeline, entries));\n      setCurrentFilters(filters);\n    }\n  }, [currentFilters, entries, filters, google, timeline]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!google && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"timeline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PerformanceTimeline, \"s9bX731k8f55avyVKCRdLwePPo8=\");\n\n_c = PerformanceTimeline;\nexport default PerformanceTimeline;\n\nconst getPerformanceObject = async (filters, entries) => {\n  const data = entries; //const data = await fetch(\"string.json\").then((res) => res.json());\n\n  let retList = [];\n  let counter = 1;\n  filters = filters.map(filter => filter.name);\n  data.forEach(entry => {\n    if (!entry.name.endsWith(\"duration\") && !entry.name.startsWith(\"@grammarly\") && filters.includes(entry.entryType) && (filters.includes('frog calls') || !filters.includes('frog calls') && !entry.name.includes('frog'))) {\n      const retEntry = {\n        displayName: entry.name,\n        type: entry.entryType,\n        name: entry.name,\n        starts: entry.startTime,\n        ends: entry.startTime + entry.duration\n      };\n      let nameStartIndex = 0;\n\n      if (entry.name.startsWith(\"[fedops] \")) {\n        nameStartIndex = 9;\n      }\n\n      let nameEndIndex = entry.name.length - 1;\n\n      if (entry.name.includes(\"started\")) {\n        nameEndIndex = entry.name.indexOf(\" started\");\n        retEntry.starts = entry.startTime;\n        retEntry.ends = entry.startTime;\n      } else if (entry.name.includes(\"finished\")) {\n        nameEndIndex = entry.name.indexOf(\" finished\");\n      } else if (entry.name.includes(\"ended\")) {\n        nameEndIndex = entry.name.indexOf(\" ended\");\n      }\n\n      retEntry.name = entry.name.slice(nameStartIndex, nameEndIndex + 1);\n      let found = false;\n      retList.forEach(ret => {\n        if (ret.name === retEntry.name) {\n          ret.ends = entry.startTime + entry.duration;\n          found = true;\n        }\n      });\n\n      if (!found) {\n        retEntry.displayName = entry.name.startsWith(\"https://\") ? `fetch call ${counter++}` : entry.name.slice(nameStartIndex, nameEndIndex + 1);\n        retList.push(retEntry);\n      }\n    }\n  });\n  return retList;\n};\n\nconst drawChart = async (filters, google, setTimeline, entries) => {\n  const container = document.getElementById(\"timeline\");\n  container.style.height = \"8000px\";\n  const newChart = new google.visualization.Timeline(container);\n  const dataTable = new google.visualization.DataTable();\n  const data = await getPerformanceObject(filters, entries);\n  dataTable.addColumn({\n    type: \"string\",\n    id: \"row label\"\n  });\n  dataTable.addColumn({\n    type: \"string\",\n    id: \"bar label\"\n  });\n  dataTable.addColumn({\n    type: \"string\",\n    role: \"tooltip\"\n  });\n  dataTable.addColumn({\n    type: \"number\",\n    id: \"Start\"\n  });\n  dataTable.addColumn({\n    type: \"number\",\n    id: \"End\"\n  });\n\n  for (let i = 0; i < data.length; i++) {\n    dataTable.addRow([data[i].type, data[i].displayName, `<div style=\"border:solid 1px #000000; padding: 10px\">\n\t\t\t\t\t\t\t<h2>${data[i].name}</h2>\n\t\t\t\t\t\t\t<div style=\"font-size: medium; font-family: 'Trirong', sans-serif\">${parseInt(data[i].starts)} mil - ${parseInt(data[i].ends)} mil</div>\n\t\t\t\t\t\t\t<div style=\"font-size: medium; font-family: 'Trirong', sans-serif\">Duration: ${parseInt(data[i].ends - data[i].starts)} mil</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t`, parseInt(data[i].starts) * 5, parseInt(data[i].ends) * 5]);\n  }\n\n  const options = {\n    width: \"100%\",\n    height: \"100%\",\n    timeline: {\n      colorByRowLabel: true,\n      groupByRowLabel: false\n    }\n  };\n  newChart.draw(dataTable, options);\n  setTimeline(newChart);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"PerformanceTimeline\");","map":{"version":3,"sources":["/Users/chenk/performance/ChenK14.github.io/chenk14.github.io/src/PerformanceTimeline.js"],"names":["useEffect","useState","Spinner","PerformanceTimeline","google","filters","entries","timeline","setTimeline","currentFilters","setCurrentFilters","charts","load","packages","setOnLoadCallback","drawChart","getPerformanceObject","data","retList","counter","map","filter","name","forEach","entry","endsWith","startsWith","includes","entryType","retEntry","displayName","type","starts","startTime","ends","duration","nameStartIndex","nameEndIndex","length","indexOf","slice","found","ret","push","container","document","getElementById","style","height","newChart","visualization","Timeline","dataTable","DataTable","addColumn","id","role","i","addRow","parseInt","options","width","colorByRowLabel","groupByRowLabel","draw"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nfunction PerformanceTimeline({ google, filters, entries }) {\n  const [timeline, setTimeline] = useState(null);\n  const [currentFilters, setCurrentFilters] = useState(filters);\n  useEffect(() => {\n    if (google && (!timeline|| currentFilters !== filters)) {\n      google.charts.load(\"current\", { packages: [\"timeline\"] });\n      google.charts.setOnLoadCallback(() =>\n        drawChart(filters, google, setTimeline,entries)\n      )\n      setCurrentFilters(filters)\n    }\n  }, [currentFilters, entries, filters, google, timeline]);\n\n  return (\n    <div>\n      {!google && <Spinner />}\n      <div id=\"timeline\"  />\n    </div>\n  );\n}\n\nexport default PerformanceTimeline;\n\nconst getPerformanceObject = async (filters,entries) => {\n  const data = entries\n\n  //const data = await fetch(\"string.json\").then((res) => res.json());\n  let retList = [];\n  let counter = 1;\n  filters=filters.map((filter) => filter.name)\n  data.forEach((entry) => {\n    if (\n      !entry.name.endsWith(\"duration\") &&\n      !entry.name.startsWith(\"@grammarly\") &&\n      filters.includes(entry.entryType)&&\n        ((filters.includes('frog calls'))||\n        (!filters.includes('frog calls')&&!entry.name.includes('frog')))\n    ) {\n      const retEntry = {\n        displayName: entry.name,\n        type: entry.entryType,\n        name: entry.name,\n        starts: entry.startTime,\n        ends: entry.startTime + entry.duration,\n      };\n\n      let nameStartIndex = 0;\n      if (entry.name.startsWith(\"[fedops] \")) {\n        nameStartIndex = 9;\n      }\n      let nameEndIndex = entry.name.length - 1;\n      if (entry.name.includes(\"started\")) {\n        nameEndIndex = entry.name.indexOf(\" started\");\n        retEntry.starts = entry.startTime;\n        retEntry.ends = entry.startTime;\n      } else if (entry.name.includes(\"finished\")) {\n        nameEndIndex = entry.name.indexOf(\" finished\");\n      } else if (entry.name.includes(\"ended\")) {\n        nameEndIndex = entry.name.indexOf(\" ended\");\n      }\n      retEntry.name = entry.name.slice(nameStartIndex, nameEndIndex + 1);\n\n      let found = false;\n      retList.forEach((ret) => {\n        if (ret.name === retEntry.name) {\n          ret.ends = entry.startTime + entry.duration;\n          found = true;\n        }\n      });\n      if (!found) {\n        retEntry.displayName = entry.name.startsWith(\"https://\")\n          ? `fetch call ${counter++}`\n          : entry.name.slice(nameStartIndex, nameEndIndex + 1);\n        retList.push(retEntry);\n      }\n    }\n  });\n  return retList;\n};\n\nconst drawChart = async (filters, google, setTimeline,entries) => {\n  const container = document.getElementById(\"timeline\");\n  container.style.height = \"8000px\";\n  const newChart = new google.visualization.Timeline(container);\n  const dataTable = new google.visualization.DataTable();\n  const data = await getPerformanceObject(filters,entries);\n  dataTable.addColumn({ type: \"string\", id: \"row label\" });\n  dataTable.addColumn({ type: \"string\", id: \"bar label\" });\n  dataTable.addColumn({ type: \"string\", role: \"tooltip\" });\n  dataTable.addColumn({ type: \"number\", id: \"Start\" });\n  dataTable.addColumn({ type: \"number\", id: \"End\" });\n\n  for (let i = 0; i < data.length; i++) {\n    dataTable.addRow([\n      data[i].type,\n      data[i].displayName,\n      `<div style=\"border:solid 1px #000000; padding: 10px\">\n\t\t\t\t\t\t\t<h2>${data[i].name}</h2>\n\t\t\t\t\t\t\t<div style=\"font-size: medium; font-family: 'Trirong', sans-serif\">${parseInt(\n                data[i].starts\n              )} mil - ${parseInt(data[i].ends)} mil</div>\n\t\t\t\t\t\t\t<div style=\"font-size: medium; font-family: 'Trirong', sans-serif\">Duration: ${parseInt(\n                data[i].ends - data[i].starts\n              )} mil</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t`,\n      parseInt(data[i].starts) * 5,\n      parseInt(data[i].ends) * 5,\n    ]);\n  }\n  const options = {\n    width: \"100%\",\n    height: \"100%\",\n    timeline: { colorByRowLabel: true, groupByRowLabel: false },\n  };\n\n  newChart.draw(dataTable, options);\n  setTimeline(newChart);\n};\n"]},"metadata":{},"sourceType":"module"}